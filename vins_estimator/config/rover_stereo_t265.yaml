%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 0
num_of_cam: 2  

image0_topic: "/t265/image_left"
image1_topic: "/t265/image_right"
output_path: "~/output/"

cam0_calib: "t265_left.yaml"
cam1_calib: "t265_right.yaml"
image_width: 848
image_height: 800

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [1.0,  0.0,  0.0, 0.0, 
          0.0,  1.0,  0.0, 0.0, 
          0.0,  0.0,  1.0, 0.0,  
          0.0,  0.0,  0.0, 1.0]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.999962392747092, -0.006993186493286596, -0.005129174804764724, -0.0634742552400177,
          0.006979568859150971, 0.9999720831772302, -0.002668048861633343, 0.0004049468479554859,
          0.005147689777763354, 0.0026321490949045585, 0.9999832864008734, -0.0009053657267858989,
          0.0, 0.0, 0.0, 1.0]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 300            # max feature number in feature tracking
min_dist: 10            # min distance between two features 
freq: 0                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.08  # max solver itration time (ms), to guarantee real time
max_num_iterations: 10   # max solver itrations, to guarantee real time
keyframe_parallax: 15.0 # keyframe selection threshold (pixel)

#loop closure parameters
load_previous_pose_graph: 0                   # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/"  # save and load path
save_image: 1                                 # save image in pose graph for visualization prupose; you can close this function by setting 0 